#!/usr/bin/bash
#
# Init script for libvirtd
# Written by Matteo Bernardini <ponce@slackbuilds.org> for Slackware
# Modified for LFS by MyRequiem <mrvladislavovich@gmail.com>
#
# Note that a dnsmasq daemon is started by libvirtd itself to serve
# its virtual network, and possibly can conflict with a dnsmasq
# already running on the system, see
# http://wiki.libvirt.org/page/Libvirtd_and_dnsmasq
# Note also that the tun, vhost_net and kvm related modules are
# automatically loaded at start and removed at stop: edit the
# script if this behaviour conflicts with anything else running
# on your setup

VIRSH=/usr/bin/virsh
MODULES="tun vhost_net virtio_net virtio_blk virtio_console virtio_rng virtio_pci virtio_balloon virtio_gpu virtio_scsi"
TIMEOUT=300
LIBVIRTD_PIDFILE="/var/run/libvirt/libvirtd.pid"
VIRTLOGD_PIDFILE="/var/run/libvirt/virtlogd.pid"
VIRTLOCKD_PIDFILE="/var/run/libvirt/virtlockd.pid"
LIBVIRTD_OPTS=" -f /etc/libvirt/libvirtd.conf -p ${LIBVIRTD_PIDFILE} "
VIRTLOGD_OPTS=" -f /etc/libvirt/virtlogd.conf -p ${VIRTLOGD_PIDFILE} "
VIRTLOCKD_OPTS=" -f /etc/libvirt/virtlockd.conf -p ${VIRTLOCKD_PIDFILE} "

guests_reboot() {
    for MACHINE in $($VIRSH list --name --state-running | grep -v ^$) ; do
        "${VIRSH}" reboot "${MACHINE}"
    done
}

guests_shutdown() {
    for MACHINE in $(${VIRSH} list --name --state-running | grep -v ^$); do
        "${VIRSH}" shutdown "${MACHINE}" &
    done

    sleep 2

    echo -n "Waiting for guests to finish shutting down..."

    COUNT=0

    while [ "$($VIRSH list --name --state-running | grep -vc ^$)" -gt "0" ]; do
        if [ "$COUNT" -ge "$TIMEOUT" ];then
            break
        fi

        echo -n "."
        COUNT=$((COUNT + 1))
        sleep 1
    done

    echo ""

    if [ "$(${VIRSH} list --name --state-running | grep -vc ^$)" -gt "0" ];then
        echo -n "The following guests are still running after "
        echo -n "${TIMEOUT} seconds; destroying them: "

        for MACHINE in $(${VIRSH} list --name --state-running | grep -v ^$) ; do
            "${VIRSH}" destroy "${MACHINE}"
            echo -n "${MACHINE} "
        done

        sleep 2
    else
        # add back the seconds we waited before starting the count
        count=$((COUNT + 2))
        echo "Shutdown of guests took $count seconds..."
    fi
}

guests_managedsave() {
    # apply managedsave on running and paused machines (as we can't distinguish
    # between the two states while managedsave is being applied, so won't know
    # when to finish waiting)

    for MACHINE in $(${VIRSH} list --name | grep -v ^$); do
        "${VIRSH}" managedsave "${MACHINE}" &
    done

    sleep 2

    echo -n "Waiting for managedsave to finish on all guests..."

    COUNT=0

    while [ "$($VIRSH list --name | grep -vc ^$)" -gt "0" ]; do
        if [ "${COUNT}" -ge "${TIMEOUT}" ];then
            break
        fi

        echo -n "."
        COUNT=$((COUNT + 1))

        sleep 1
    done

    echo ""

    if [ "$(${VIRSH} list --name | grep -vc ^$)" -gt "0" ];then
        echo -n "Following guests are still running after "
        echo -n "${TIMEOUT} seconds, destroying them: "

        for MACHINE in $($VIRSH list --name | grep -v ^$) ; do
            "${VIRSH}" destroy "${MACHINE}"
            echo -n "${MACHINE} "
        done

        sleep 2
    else
        # add back the seconds we waited before starting the count
        COUNT=$((COUNT + 2))
        echo "Guests managed save took ${COUNT} seconds..."
    fi
}

check_processor() {
    KVM_MODULE=""
    grep -E 'vmx' /proc/cpuinfo > /dev/null && KVM_MODULE="kvm_intel"
    grep -E 'svm' /proc/cpuinfo > /dev/null && KVM_MODULE="kvm_amd"

    if [ -z "${KVM_MODULE}" ]; then
        echo "Your system does not support KVM!"
        exit 1
    fi

    MODULES="${MODULES} ${KVM_MODULE} kvm"
}

start_libvirtd() {
    if [ -f "${LIBVIRTD_PIDFILE}" ];then
        echo "libvirt is already running..."
        exit 1
    fi

    mkdir -p "$(dirname ${LIBVIRTD_PIDFILE})"
    mkdir -p /run/libvirt/{lockd,lxc,network,qemu/swtpm}

    check_processor

    echo ""
    echo "Loading kernel modules..."
    echo "-------------------------"
    for MODULE in ${MODULES}; do
        if ! /bin/lsmod | /bin/grep -E "^${MODULE} " &>/dev/null; then
            echo "Loading ${MODULE}"
            /sbin/modprobe -a "${MODULE}"
        else
            echo "${MODULE} already loaded"
        fi
    done

    echo ""
    echo "Starting libvirtd:  /usr/sbin/libvirtd -d -l ${LIBVIRTD_OPTS}"
    /usr/sbin/libvirtd -d -l "${LIBVIRTD_OPTS}"
}

stop_libvirtd() {
    if ! [ -f "${LIBVIRTD_PIDFILE}" ];then
        echo "libvirt is not running..."
        exit 2
    fi

    guests_managedsave
    check_processor

    echo "Stopping libvirtd..."
    for NETWORK in $($VIRSH net-list --name); do
        "${VIRSH}" net-destroy "${NETWORK}"
    done

    kill -TERM "$(cat ${LIBVIRTD_PIDFILE})"
    sleep 3

    echo ""
    echo "Unloading kernel modules..."
    echo "----------------------------"
    for MODULE in ${MODULES}; do
        if /bin/lsmod | /bin/grep -E "^${MODULE} " &>/dev/null; then
            echo "Unload ${MODULE}"
            /sbin/modprobe -ra "${MODULE}" 2>/dev/null
        else
            echo "${MODULE} not loaded"
        fi
    done
}

start_virtlogd() {
    if [ -f "${VIRTLOGD_PIDFILE}" ];then
        echo "virtlogd is already running..."
        exit 1
    fi

    echo "Starting virtlogd:  /usr/sbin/virtlogd -d "
    mkdir -p "$(dirname ${VIRTLOGD_PIDFILE})"
    /usr/sbin/virtlogd -d "${VIRTLOGD_OPTS}"
}

stop_virtlogd() {
    if [ ! -f "${VIRTLOGD_PIDFILE}" ];then
        echo "virtlogd is not running..."
        exit 2
    fi

    echo "Stopping virtlogd..."
    kill -TERM "$(cat ${VIRTLOGD_PIDFILE})"
    sleep 1
}

start_virtlockd() {
    if [ -f "${VIRTLOCKD_PIDFILE}" ];then
        echo "virtlockd is already running..."
        exit 1
    fi

    echo "Starting virtlockd:  /usr/sbin/virtlockd -d "
    mkdir -p "$(dirname ${VIRTLOCKD_PIDFILE})"
    /usr/sbin/virtlockd -d "${VIRTLOCKD_OPTS}"
}

stop_virtlockd() {
    if [ ! -f $VIRTLOCKD_PIDFILE ];then
        echo "virtlockd is not running..."
        exit 2
    fi

    echo "Stopping virtlockd..."
    kill -TERM "$(cat ${VIRTLOCKD_PIDFILE})"
    sleep 1
}

soft_restart() {
    echo "Soft-restarting libvirt..."
    if [ ! -f $LIBVIRTD_PIDFILE ];then
        echo "libvirt is not running..."
        exit 2
    fi

    echo "Stopping libvirtd..."
    kill -TERM "$(cat ${LIBVIRTD_PIDFILE})"
    sleep 3
    stop_virtlogd
    stop_virtlockd
    sleep 1
    start_virtlockd
    start_virtlogd
    start_libvirtd
}

case $1 in
    start)
        start_virtlockd
        start_virtlogd
        start_libvirtd
        ;;
    stop)
        stop_libvirtd
        stop_virtlogd
        stop_virtlockd
        ;;
    restart)
        stop_libvirtd
        stop_virtlogd
        stop_virtlockd
        sleep 2
        start_virtlockd
        start_virtlogd
        start_libvirtd
        ;;
    soft_restart)
        soft_restart
        ;;
    guests_shutdown)
        guests_shutdown
        ;;
    guests_reboot)
        guests_reboot
        ;;
    *)
        echo "Usage: $0 (start|stop|restart|soft_restart|guests_shutdown|guests_reboot)"
    ;;
esac
