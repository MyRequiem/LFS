diff -U 1 -ur vde2-2.3.2_orig/src/vde_cryptcab/cryptcab.c vde2-2.3.2/src/vde_cryptcab/cryptcab.c
--- vde2-2.3.2_orig/src/vde_cryptcab/cryptcab.c	2011-11-23 20:41:17.000000000 +0400
+++ vde2-2.3.2/src/vde_cryptcab/cryptcab.c	2022-03-02 19:33:05.702492126 +0400
@@ -21,8 +21,8 @@
 	fprintf(stderr,"Usage: %s [-s socketname] [-c [remoteuser@]remotehost[:remoteport]] [-p localport] [-P pre-shared/key/path] [-d] [-x] [-v]\n",programname);
 	exit(1);
 }
-	
-static EVP_CIPHER_CTX ctx;
+
+static EVP_CIPHER_CTX *ctx;
 static int ctx_initialized = 0;
 static int encryption_disabled = 0;
 static int nfd;
@@ -30,6 +30,10 @@
 static struct vde_open_args open_args={.port=0,.group=NULL,.mode=0700};
 static int verbose = 0;
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000
+#define EVP_CIPHER_CTX_reset(x)	EVP_CIPHER_CTX_cleanup(x)
+#endif
+
 void vc_printlog(int priority, const char *format, ...)
 {
 	va_list arg;
@@ -58,8 +62,8 @@
 int
 isvalid_timestamp(unsigned char *block, int size, struct peer *p)
 {
-	
-	
+
+
 	int i;
 	unsigned long long pktcounter=0;
 	for(i=0;i<8;i++){
@@ -72,13 +76,13 @@
 		//fprintf(stderr,"bad timestamp!\n");
 		return 0;
 	}
-	
+
 }
 
 /*
  * Check CRC32 Checksum from incoming datagram
  */
-int 
+int
 isvalid_crc32(unsigned char *block, int len)
 {
 	unsigned char *crc=(unsigned char *)crc32(block,len-4);
@@ -86,7 +90,7 @@
 		free(crc);
 		return 1;
 	}else{
-			
+
 		//fprintf(stderr,"bad crc32!\n");
 		free(crc);
 		return 0;
@@ -96,26 +100,28 @@
 int data_encrypt(unsigned char *src, unsigned char *dst, int len, struct peer *p)
 {
 	int tlen, olen;
-	
+
 	if (encryption_disabled){
 		memcpy(dst,src,len);
 		return len;
 	}
 
 	if (!ctx_initialized) {
-		EVP_CIPHER_CTX_init (&ctx);
+		ctx = EVP_CIPHER_CTX_new ();
+		if (!ctx)
+			return -1;
 		ctx_initialized = 1;
 	}
-	
-	EVP_EncryptInit (&ctx, EVP_bf_cbc (), p->key, p->iv);
-	if (EVP_EncryptUpdate (&ctx, dst, &olen, src, len) != 1)
+
+	EVP_EncryptInit (ctx, EVP_bf_cbc (), p->key, p->iv);
+	if (EVP_EncryptUpdate (ctx, dst, &olen, src, len) != 1)
 	{
 		fprintf (stderr,"error in encrypt update\n");
 		olen = -1;
 		goto cleanup;
 	}
 
-	if (EVP_EncryptFinal (&ctx, dst + olen, &tlen) != 1)
+	if (EVP_EncryptFinal (ctx, dst + olen, &tlen) != 1)
 	{
 		fprintf (stderr,"error in encrypt final\n");
 		olen = -1;
@@ -124,7 +130,7 @@
 	olen += tlen;
 
 cleanup:
-	EVP_CIPHER_CTX_cleanup(&ctx);	
+	EVP_CIPHER_CTX_reset(ctx);
 	return olen;
 }
 
@@ -136,21 +142,23 @@
 		memcpy(dst,src,len);
 		return len;
 	}
-	
+
 	if (!ctx_initialized) {
-		EVP_CIPHER_CTX_init (&ctx);
+		ctx = EVP_CIPHER_CTX_new ();
+		if (!ctx)
+			return -1;
 		ctx_initialized = 1;
 	}
 
-	EVP_DecryptInit (&ctx, EVP_bf_cbc (), p->key, p->iv);
-	if (EVP_DecryptUpdate (&ctx, dst, &olen, src, len) != 1)
+	EVP_DecryptInit (ctx, EVP_bf_cbc (), p->key, p->iv);
+	if (EVP_DecryptUpdate (ctx, dst, &olen, src, len) != 1)
 	{
 		fprintf (stderr,"error in decrypt update\n");
 		olen = -1;
 		goto cleanup;
 	}
 
-	if (EVP_DecryptFinal (&ctx, dst + olen, &tlen) != 1)
+	if (EVP_DecryptFinal (ctx, dst + olen, &tlen) != 1)
 	{
 		fprintf (stderr,"error in decrypt final\n");
 		olen = -1;
@@ -159,14 +167,14 @@
 	olen += tlen;
 
 cleanup:
-	EVP_CIPHER_CTX_cleanup(&ctx);	
+	EVP_CIPHER_CTX_reset (ctx);
 	return olen;
 }
 
 /*
  * Include a progressive number into outgoing datagram,
  * to prevent packet replication/injection attack.
- * 
+ *
  */
 void
 set_timestamp(unsigned char *block)
@@ -176,8 +184,8 @@
 		block[i]=(unsigned char)(mycounter>>(i*8))&(0x00000000000000FF);
 	}
 	mycounter++;
-	
-		
+
+
 }
 
 
@@ -187,7 +195,7 @@
 void
 send_udp (unsigned char *data, size_t len, struct peer *p, unsigned char flags)
 {
-		  
+
 	unsigned char outpkt[MAXPKT];
 	unsigned char *outbuf=outpkt+1;
 	int olen;
@@ -200,12 +208,12 @@
 		if(flags==PKT_DATA){
 			set_timestamp(data+len);
 			len+=8;
-			
+
 			crc = crc32(data,len);
 			memcpy(data+len,crc,4);
 			free(crc);
 			len+=4;
-			
+
 		}
 		olen = data_encrypt(data,outbuf,len,p);
 	}
@@ -228,7 +236,7 @@
 }
 
 /*
- * Send a virtual frame to the vde_plug process associated 
+ * Send a virtual frame to the vde_plug process associated
  * with the peer
  */
 void
@@ -239,24 +247,24 @@
 	static u_int16_t outlen;
 	if(len<=0)
 		return;
-	
+
 	if(outp==0 && (len >=2) ){
 		outlen=2;
 		outlen+=(unsigned char)data[1];
 		outlen+=((unsigned char)(data[0]))<<8;
 	}
-	
+
 	if(len>=outlen){
 		vde_send(p->plug,data,outlen,0);
 		send_vdeplug(data+outlen,len-outlen, p);
 		return;
 	}
-		
+
 	memcpy(outbuf+outp,data,len);
 	outp+=len;
 	if(outp>=outlen){
 		vde_send(p->plug,(char *)outbuf,outlen,0);
-	}			
+	}
 	vc_printlog(3,"VDE - Sent a %dB datagram.",outlen);
 }
 
@@ -266,7 +274,7 @@
 int main(int argc, char **argv, char **env)
 {
 	int c;
-	char *programname=argv[0];		
+	char *programname=argv[0];
 	char *plugname="/tmp/vde.ctl";
 	char *remotehost = NULL;
 	char *remoteusr = NULL;
@@ -279,7 +287,7 @@
 	int daemonize = 0;
 
 	scp_extra_options=getenv("SCP_EXTRA_OPTIONS");
-	
+
 
 	while (1) {
 		int option_index = 0;
@@ -325,12 +333,12 @@
 
 		      	  pusr=strchr(ctl_socket,sepusr);
 		      	  pport=strchr(ctl_socket,sepport);
-		      	  
-		      	  if( ( pusr != strrchr(ctl_socket,sepusr)) || 
+
+		      	  if( ( pusr != strrchr(ctl_socket,sepusr)) ||
 		      		(pport != strrchr(ctl_socket,sepport)) ||
 		      			(pport && pusr>pport) )
 		      		  Usage(programname);
-		      	  
+
 		      	  if(!pusr && !pport){
 		      		  remoteusr=NULL;
 		      		  remoteport=PORTNO;
@@ -357,8 +365,8 @@
 		        case 'p':
 		      	udp_port=atoi(optarg);
 		      	break;
-		      	
-		        case 'P': 
+
+		        case 'P':
 		      	pre_shared=strdup(optarg);
 		      	fprintf(stderr,"Using pre-shared key %s\n",pre_shared);
 			enc_type = ENC_PRESHARED;
@@ -375,7 +383,7 @@
 		      	  Usage(programname);
 		}
 	}
-	if(optind < argc) 
+	if(optind < argc)
 		  Usage(programname);
 	if (keepalives && remotehost==NULL){
 		fprintf(stderr,"\nkeepalive option is valid in client mode only.\n\n");
@@ -385,11 +393,11 @@
 		fprintf(stderr,"\nWarning: Not using pre-shared key mode, encryption disabled.\n\n");
 		pre_shared = NULL;
 	}
-		
-	
+
+
 	vc_printlog(1,"Verbosity: %d", verbose);
-	chksum_crc32gentab();	
-	
+	chksum_crc32gentab();
+
 	switch(enc_type){
 		case ENC_NOENC:
 			vc_printlog(1,"Encryption Disabled.");
@@ -408,10 +416,10 @@
 			close(STDIN_FILENO);
 			close(STDOUT_FILENO);
 			if (fork() > 0)
-				exit(0); 
+				exit(0);
 		} else exit(0);
 	}
-	  
+
 	if(!remotehost){
 		cryptcab_server(plugname, udp_port, enc_type, pre_shared);
 	} else {
